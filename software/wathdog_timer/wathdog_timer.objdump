
wathdog_timer.elf:     file format elf32-littlenios2
wathdog_timer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000031c memsz 0x0000031c flags r-x
    LOAD off    0x0000133c vaddr 0x0001033c paddr 0x00010340 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001344 vaddr 0x00010344 paddr 0x00010344 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001340  2**0
                  CONTENTS
  2 .text         00000314  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000008  00010334  00010334  00001334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0001033c  00010340  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00010344  00010344  00001344  2**2
                  ALLOC, SMALL_DATA
  6 .onchip       00000000  00010350  00010350  00001340  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001368  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000bf2  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006a8  00000000  00000000  000020e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007eb  00000000  00000000  0000278a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001cc  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000060e  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000138  00000000  00000000  00003752  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000478a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0000478d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004795  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004796  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00004797  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000479b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000479f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000047a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000047b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000001c  00000000  00000000  000047c4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY
 29 .jdi          00006ef4  00000000  00000000  00004812  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000543ca  00000000  00000000  0000b706  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010334 l    d  .rodata	00000000 .rodata
0001033c l    d  .rwdata	00000000 .rwdata
00010344 l    d  .bss	00000000 .bss
00010350 l    d  .onchip	00000000 .onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../wathdog_timer_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 is_key_pressed.c
00000000 l    df *ABS*	00000000 watchdog_timer.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0001024c g     F .text	0000002c alt_main
00010340 g       *ABS*	00000000 __flash_rwdata_start
00010074 g     F .text	00000020 is_key1_pressed
00010278 g     F .text	00000038 alt_putstr
00010310 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010348 g     O .bss	00000004 alt_argv
0001833c g       *ABS*	00000000 _gp
0001005c g     F .text	00000018 is_key0_pressed
00010350 g       *ABS*	00000000 __bss_end
00010308 g     F .text	00000004 alt_dcache_flush_all
00010340 g       *ABS*	00000000 __ram_rwdata_end
0001033c g       *ABS*	00000000 __ram_rodata_end
0001033c g     O .rwdata	00000004 jtag_uart_0
00010350 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000102d4 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000102d0 g     F .text	00000004 alt_sys_init
0001033c g       *ABS*	00000000 __ram_rwdata_start
00010334 g       *ABS*	00000000 __ram_rodata_start
00010350 g       *ABS*	00000000 __alt_stack_base
00010344 g       *ABS*	00000000 __bss_start
00010094 g     F .text	000000d8 main
00010344 g     O .bss	00000004 alt_envp
00010334 g       *ABS*	00000000 __flash_rodata_start
000102b0 g     F .text	00000020 alt_irq_init
0001034c g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010340 g       *ABS*	00000000 _edata
00010350 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010000 g       *ABS*	00000000 __alt_mem_onchip
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010318 g     F .text	0000001c strlen
0001030c g     F .text	00000004 alt_icache_flush_all
0001016c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0cf14 	ori	gp,gp,33596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080d114 	ori	r2,r2,836

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0d414 	ori	r3,r3,848

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	001016c0 	call	1016c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	001024c0 	call	1024c <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <is_key0_pressed>:
#include "is_key_pressed.h"

 /* returns false if the push button 0 is not pressed and true if pressed*/
bool is_key0_pressed(){

	if(IORD_8DIRECT(PUSH_BUTTON_BASE, 0) & 0x01)
   1005c:	008000b4 	movhi	r2,2
   10060:	10840c04 	addi	r2,r2,4144
   10064:	10800023 	ldbuio	r2,0(r2)
   10068:	1080004c 	andi	r2,r2,1
		return false;
	else
		return true;
}
   1006c:	1080005c 	xori	r2,r2,1
   10070:	f800283a 	ret

00010074 <is_key1_pressed>:

/* returns false if the push button 1 is not pressed and true if pressed*/
bool is_key1_pressed(){

	if(IORD_8DIRECT(PUSH_BUTTON_BASE, 0) & 0x02)
   10074:	008000b4 	movhi	r2,2
   10078:	10840c04 	addi	r2,r2,4144
   1007c:	10800023 	ldbuio	r2,0(r2)
   10080:	10803fcc 	andi	r2,r2,255
   10084:	1004d07a 	srli	r2,r2,1
   10088:	1080005c 	xori	r2,r2,1
		return false;
	else
		return true;
}
   1008c:	1080004c 	andi	r2,r2,1
   10090:	f800283a 	ret

00010094 <main>:


int main()
{
	alt_u8 counter = 0;
	alt_putstr("Start!\n");
   10094:	01000074 	movhi	r4,1
#include "is_key_pressed.h"



int main()
{
   10098:	defff904 	addi	sp,sp,-28
	alt_u8 counter = 0;
	alt_putstr("Start!\n");
   1009c:	2100cd04 	addi	r4,r4,820
#include "is_key_pressed.h"



int main()
{
   100a0:	dfc00615 	stw	ra,24(sp)
   100a4:	dd400515 	stw	r21,20(sp)
   100a8:	dd000415 	stw	r20,16(sp)
   100ac:	dcc00315 	stw	r19,12(sp)
   100b0:	dc800215 	stw	r18,8(sp)
   100b4:	dc400115 	stw	r17,4(sp)
   100b8:	dc000015 	stw	r16,0(sp)
	alt_u8 counter = 0;
	alt_putstr("Start!\n");
   100bc:	00102780 	call	10278 <alt_putstr>


  TIMER_RESET;
   100c0:	008000b4 	movhi	r2,2
   100c4:	10841504 	addi	r2,r2,4180
   100c8:	00d00034 	movhi	r3,16384
   100cc:	10c00035 	stwio	r3,0(r2)
  TIMER_START;
   100d0:	00e00034 	movhi	r3,32768
   100d4:	10c00035 	stwio	r3,0(r2)
  while (1){
	  TIMER_RESET;
	  TIMER_START;

	  //starts every 500ms
	  while(TIMER_READ <= 25000000){
   100d8:	050000b4 	movhi	r20,2
   100dc:	05405f74 	movhi	r21,381
		  counter = 0;
	  }
	  else{
	  counter += 1;
	  }
	  IOWR_8DIRECT(SEVEN_SEGMENT_LEDS_BASE,0,counter);
   100e0:	04c000b4 	movhi	r19,2
	  IOWR_8DIRECT(KICKER_OUTPUT_BASE,0,1);
   100e4:	048000b4 	movhi	r18,2



int main()
{
	alt_u8 counter = 0;
   100e8:	0023883a 	mov	r17,zero
   100ec:	1021883a 	mov	r16,r2
  while (1){
	  TIMER_RESET;
	  TIMER_START;

	  //starts every 500ms
	  while(TIMER_READ <= 25000000){
   100f0:	a5041404 	addi	r20,r20,4176
   100f4:	ad5e1004 	addi	r21,r21,30784
		  counter = 0;
	  }
	  else{
	  counter += 1;
	  }
	  IOWR_8DIRECT(SEVEN_SEGMENT_LEDS_BASE,0,counter);
   100f8:	9cc40404 	addi	r19,r19,4112
	  IOWR_8DIRECT(KICKER_OUTPUT_BASE,0,1);
   100fc:	94840804 	addi	r18,r18,4128
  TIMER_RESET;
  TIMER_START;

   /* Event loop never exits. */
  while (1){
	  TIMER_RESET;
   10100:	00900034 	movhi	r2,16384
   10104:	80800035 	stwio	r2,0(r16)
	  TIMER_START;
   10108:	00a00034 	movhi	r2,32768
   1010c:	80800035 	stwio	r2,0(r16)

	  //starts every 500ms
	  while(TIMER_READ <= 25000000){
   10110:	a0800037 	ldwio	r2,0(r20)
   10114:	a8800b16 	blt	r21,r2,10144 <main+0xb0>

		  if(is_key0_pressed()){
   10118:	001005c0 	call	1005c <is_key0_pressed>
   1011c:	10803fcc 	andi	r2,r2,255
   10120:	103ffb26 	beq	r2,zero,10110 <__alt_data_end+0xffff0110>
			 IOWR_8DIRECT(LED_DIODS_BASE,0,255);
   10124:	008000b4 	movhi	r2,2
   10128:	10841004 	addi	r2,r2,4160
   1012c:	00ffffc4 	movi	r3,-1
   10130:	10c00025 	stbio	r3,0(r2)
			 IOWR_8DIRECT(KICKER_OUTPUT_BASE,0,0);
   10134:	008000b4 	movhi	r2,2
   10138:	10840804 	addi	r2,r2,4128
   1013c:	10000025 	stbio	zero,0(r2)
   10140:	003fff06 	br	10140 <__alt_data_end+0xffff0140>

		  //write high signal to kicker heartbeat
		  //count up seven segment
	  }

	  if(counter == 99){
   10144:	88803fcc 	andi	r2,r17,255
   10148:	00c018c4 	movi	r3,99
   1014c:	10c00226 	beq	r2,r3,10158 <main+0xc4>
		  counter = 0;
	  }
	  else{
	  counter += 1;
   10150:	8c400044 	addi	r17,r17,1
   10154:	00000106 	br	1015c <main+0xc8>
		  //write high signal to kicker heartbeat
		  //count up seven segment
	  }

	  if(counter == 99){
		  counter = 0;
   10158:	0023883a 	mov	r17,zero
	  }
	  else{
	  counter += 1;
	  }
	  IOWR_8DIRECT(SEVEN_SEGMENT_LEDS_BASE,0,counter);
   1015c:	9c400025 	stbio	r17,0(r19)
	  IOWR_8DIRECT(KICKER_OUTPUT_BASE,0,1);
   10160:	00800044 	movi	r2,1
   10164:	90800025 	stbio	r2,0(r18)

  }
   10168:	003fe506 	br	10100 <__alt_data_end+0xffff0100>

0001016c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1016c:	deffff04 	addi	sp,sp,-4
   10170:	01000074 	movhi	r4,1
   10174:	01400074 	movhi	r5,1
   10178:	dfc00015 	stw	ra,0(sp)
   1017c:	2100cf04 	addi	r4,r4,828
   10180:	2940d004 	addi	r5,r5,832

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10184:	2140061e 	bne	r4,r5,101a0 <alt_load+0x34>
   10188:	01000074 	movhi	r4,1
   1018c:	01400074 	movhi	r5,1
   10190:	21000804 	addi	r4,r4,32
   10194:	29400804 	addi	r5,r5,32
   10198:	2140121e 	bne	r4,r5,101e4 <alt_load+0x78>
   1019c:	00000b06 	br	101cc <alt_load+0x60>
   101a0:	00c00074 	movhi	r3,1
   101a4:	18c0d004 	addi	r3,r3,832
   101a8:	1907c83a 	sub	r3,r3,r4
   101ac:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101b0:	10fff526 	beq	r2,r3,10188 <__alt_data_end+0xffff0188>
    {
      *to++ = *from++;
   101b4:	114f883a 	add	r7,r2,r5
   101b8:	39c00017 	ldw	r7,0(r7)
   101bc:	110d883a 	add	r6,r2,r4
   101c0:	10800104 	addi	r2,r2,4
   101c4:	31c00015 	stw	r7,0(r6)
   101c8:	003ff906 	br	101b0 <__alt_data_end+0xffff01b0>
   101cc:	01000074 	movhi	r4,1
   101d0:	01400074 	movhi	r5,1
   101d4:	2100cd04 	addi	r4,r4,820
   101d8:	2940cd04 	addi	r5,r5,820

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101dc:	2140101e 	bne	r4,r5,10220 <alt_load+0xb4>
   101e0:	00000b06 	br	10210 <alt_load+0xa4>
   101e4:	00c00074 	movhi	r3,1
   101e8:	18c00804 	addi	r3,r3,32
   101ec:	1907c83a 	sub	r3,r3,r4
   101f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101f4:	10fff526 	beq	r2,r3,101cc <__alt_data_end+0xffff01cc>
    {
      *to++ = *from++;
   101f8:	114f883a 	add	r7,r2,r5
   101fc:	39c00017 	ldw	r7,0(r7)
   10200:	110d883a 	add	r6,r2,r4
   10204:	10800104 	addi	r2,r2,4
   10208:	31c00015 	stw	r7,0(r6)
   1020c:	003ff906 	br	101f4 <__alt_data_end+0xffff01f4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10210:	00103080 	call	10308 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10214:	dfc00017 	ldw	ra,0(sp)
   10218:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1021c:	001030c1 	jmpi	1030c <alt_icache_flush_all>
   10220:	00c00074 	movhi	r3,1
   10224:	18c0cf04 	addi	r3,r3,828
   10228:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1022c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10230:	18bff726 	beq	r3,r2,10210 <__alt_data_end+0xffff0210>
    {
      *to++ = *from++;
   10234:	114f883a 	add	r7,r2,r5
   10238:	39c00017 	ldw	r7,0(r7)
   1023c:	110d883a 	add	r6,r2,r4
   10240:	10800104 	addi	r2,r2,4
   10244:	31c00015 	stw	r7,0(r6)
   10248:	003ff906 	br	10230 <__alt_data_end+0xffff0230>

0001024c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1024c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10250:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10254:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10258:	00102b00 	call	102b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1025c:	00102d00 	call	102d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10260:	d1a00217 	ldw	r6,-32760(gp)
   10264:	d1600317 	ldw	r5,-32756(gp)
   10268:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   1026c:	dfc00017 	ldw	ra,0(sp)
   10270:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10274:	00100941 	jmpi	10094 <main>

00010278 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10278:	defffe04 	addi	sp,sp,-8
   1027c:	dc000015 	stw	r16,0(sp)
   10280:	dfc00115 	stw	ra,4(sp)
   10284:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10288:	00103180 	call	10318 <strlen>
   1028c:	01000074 	movhi	r4,1
   10290:	000f883a 	mov	r7,zero
   10294:	100d883a 	mov	r6,r2
   10298:	800b883a 	mov	r5,r16
   1029c:	2100cf04 	addi	r4,r4,828
#else
    return fputs(str, stdout);
#endif
#endif
}
   102a0:	dfc00117 	ldw	ra,4(sp)
   102a4:	dc000017 	ldw	r16,0(sp)
   102a8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   102ac:	00102d41 	jmpi	102d4 <altera_avalon_jtag_uart_write>

000102b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   102b0:	deffff04 	addi	sp,sp,-4
   102b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
   102b8:	00103100 	call	10310 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   102bc:	00800044 	movi	r2,1
   102c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   102c4:	dfc00017 	ldw	ra,0(sp)
   102c8:	dec00104 	addi	sp,sp,4
   102cc:	f800283a 	ret

000102d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102d0:	f800283a 	ret

000102d4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   102d4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   102d8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   102dc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102e0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   102e4:	2980072e 	bgeu	r5,r6,10304 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102e8:	38c00037 	ldwio	r3,0(r7)
   102ec:	18ffffec 	andhi	r3,r3,65535
   102f0:	183ffc26 	beq	r3,zero,102e4 <__alt_data_end+0xffff02e4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   102f4:	28c00007 	ldb	r3,0(r5)
   102f8:	20c00035 	stwio	r3,0(r4)
   102fc:	29400044 	addi	r5,r5,1
   10300:	003ff806 	br	102e4 <__alt_data_end+0xffff02e4>

  return count;
}
   10304:	f800283a 	ret

00010308 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10308:	f800283a 	ret

0001030c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1030c:	f800283a 	ret

00010310 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10310:	000170fa 	wrctl	ienable,zero
   10314:	f800283a 	ret

00010318 <strlen>:
   10318:	2005883a 	mov	r2,r4
   1031c:	10c00007 	ldb	r3,0(r2)
   10320:	18000226 	beq	r3,zero,1032c <strlen+0x14>
   10324:	10800044 	addi	r2,r2,1
   10328:	003ffc06 	br	1031c <__alt_data_end+0xffff031c>
   1032c:	1105c83a 	sub	r2,r2,r4
   10330:	f800283a 	ret
